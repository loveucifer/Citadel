// File: lib/src/services/storage_service.dart

import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';
import '../models/voice_pin.dart';

// A constant for the box name to avoid magic strings.
const String kVoicePinsBox = 'voice_pins_box';

/// A service class to manage the local persistence of VoicePins using Hive.
/// This class follows the singleton pattern to ensure a single instance
/// throughout the app's lifecycle.
class StorageService {
  // Private constructor
  StorageService._();

  // The single, static instance of this service
  static final StorageService _instance = StorageService._();

  // Factory constructor to return the same instance
  factory StorageService() => _instance;

  late Box<VoicePin> _pinsBox;

  /// Initializes the Hive database.
  /// This must be called once at app startup before any other method.
  Future<void> init() async {
    // For web, Hive uses a different storage mechanism. For mobile, we get a directory.
    if (!kIsWeb) {
      final appDocumentDir = await getApplicationDocumentsDirectory();
      await Hive.initFlutter(appDocumentDir.path);
    } else {
      await Hive.initFlutter();
    }

    // Register the adapter generated by build_runner.
    // This tells Hive how to serialize/deserialize the VoicePin object.
    Hive.registerAdapter(VoicePinAdapter());

    // Open the box. This is where the VoicePin objects will be stored.
    _pinsBox = await Hive.openBox<VoicePin>(kVoicePinsBox);

    debugPrint("StorageService initialized and VoicePins box opened.");
  }

  /// Saves a VoicePin to the local database.
  /// The pin's UUID is used as the key.
  Future<void> savePin(VoicePin pin) async {
    await _pinsBox.put(pin.uuid, pin);
    debugPrint("Saved pin with UUID: ${pin.uuid}");
  }

  /// Retrieves a single VoicePin from the database by its UUID.
  VoicePin? getPin(String uuid) {
    return _pinsBox.get(uuid);
  }

  /// Deletes a VoicePin from the database using its UUID.
  Future<void> deletePin(String uuid) async {
    await _pinsBox.delete(uuid);
    debugPrint("Deleted pin with UUID: $uuid");
  }

  /// Retrieves all VoicePins currently stored in the database.
  List<VoicePin> getAllPins() {
    // Return pins sorted by timestamp, with the newest first.
    final pins = _pinsBox.values.toList();
    pins.sort((a, b) => b.timestamp.compareTo(a.timestamp));
    return pins;
  }

  /// Provides direct access to the Hive Box.
  /// This is useful for listening to changes in the UI layer using `ValueListenableBuilder`.
  Box<VoicePin> getPinsBox() {
    return _pinsBox;
  }

  /// Clears all data from the box. Useful for debugging or reset functionality.
  Future<void> clearAllPins() async {
    await _pinsBox.clear();
    debugPrint("All voice pins have been cleared from the database.");
  }
}
